@inproceedings{10.1145/3548606.3560578,
    abbr={CCS},
    author = {Hur, Jaewon and Song, Suhwan and Kim, Sunwoo and Lee, Byoungyoung},
    title = {SpecDoctor: Differential Fuzz Testing to Find Transient Execution Vulnerabilities},
    year = {2022},
    isbn = {9781450394505},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3548606.3560578},
    abstract = {Transient execution vulnerabilities have critical security impacts to software systems since those break the fundamental security assumptions guaranteed by the CPU. Detecting these critical vulnerabilities in the RTL development stage is particularly important, as it offers a chance to fix the vulnerability early before reaching the chip manufacturing stage.This paper proposes SpecDoctor, an automated RTL fuzzer to discover transient execution vulnerabilities in the CPU. To be specific, SpecDoctor designs a fuzzing template, allowing it to test all different scenarios of transient execution vulnerabilities (e.g., Meltdown, Spectre, ForeShadow, etc.) with a single template. Then SpecDoctor performs a multi-phased fuzzing, where each phase is dedicated to solve an individual vulnerability constraint in the RTL context, thereby effectively finding the vulnerabilities.We implemented and evaluated SpecDoctor on two out-of-order RISC-V CPUs, Boom and NutShell-Argo. During the evaluation, SpecDoctor found transient-execution vulnerabilities which share the similar attack vectors as the previous works. Furthermore, SpecDoctor found two interesting variants which abuse unique attack vectors: Boombard, and Birgus. Boombard exploits an unknown implementation bug in RISC-V Boom, exacerbating it into a critical transient execution vulnerability. Birgus launches a Spectre-type attack with a port contention side channel in NutShell CPU, which is constructed using a unique combination of instructions. We reported the vulnerabilities, and both are confirmed by the developers, illustrating the strong practical impact of SpecDoctor.},
    booktitle = {Proceedings of the 2022 ACM SIGSAC Conference on Computer and Communications Security},
    pages = {1473–1487},
    numpages = {15},
    keywords = {transient-execution vulnerability, fuzzing, differential testing},
    location = {Los Angeles, CA, USA},
    series = {CCS '22}
}

@inproceedings {281314,
    abbr={SEC},
    author = {Sunwoo Kim and Young Min Kim and Jaewon Hur and Suhwan Song and Gwangmu Lee and Byoungyoung Lee},
    title = {{FuzzOrigin}: Detecting {UXSS} vulnerabilities in Browsers through Origin Fuzzing},
    booktitle = {31st USENIX Security Symposium (USENIX Security 22)},
    year = {2022},
    isbn = {978-1-939133-31-1},
    address = {Boston, MA},
    pages = {1008--1023},
    url = {https://www.usenix.org/conference/usenixsecurity22/presentation/kim},
    publisher = {USENIX Association},
    month = aug,
}

@inproceedings{10.1145/3510003.3510044,
    abbr={ICSE},
    bibtex_show={true},
    author = {Song, Suhwan and Hur, Jaewon and Kim, Sunwoo and Rogers, Philip and Lee, Byoungyoung},
    title = {R2Z2: Detecting Rendering Regressions in Web Browsers through Differential Fuzz Testing},
    year = {2022},
    isbn = {9781450392211},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3510003.3510044},
    abstract = {A rendering regression is a bug introduced by a web browser where a web page no longer functions as users expect. Such rendering bugs critically harm the usability of web browsers as well as web applications. The unique aspect of rendering bugs is that they affect the presented visual appearance of web pages, but those web pages have no pre-defined correct appearance. Therefore, it is challenging to automatically detect errors in their appearance. In practice, web browser vendors rely on non-trivial and time-prohibitive manual analysis to detect and handle rendering regressions.This paper proposes R2Z2, an automated tool to find rendering regressions. R2Z2 uses the differential fuzz testing approach, which repeatedly compares the rendering results of two different versions of a browser while providing the same HTML as input. If the rendering results are different, R2Z2 further performs cross browser compatibility testing to check if the rendering difference is indeed a rendering regression. After identifying a rendering regression, R2Z2 will perform an in-depth analysis to aid in fixing the regression. Specifically, R2Z2 performs a delta-debugging-like analysis to pinpoint the exact browser source code commit causing the regression, as well as inspecting the rendering pipeline stages to pinpoint which pipeline stage is responsible. We implemented a prototype of R2Z2 particularly targeting the Chrome browser. So far, R2Z2 found 11 previously undiscovered rendering regressions in Chrome, all of which were confirmed by the Chrome developers. Importantly, in each case, R2Z2 correctly reported the culprit commit. Moreover, R2Z2 correctly pin-pointed the culprit rendering pipeline stage in all but one case.},
    booktitle = {Proceedings of the 44th International Conference on Software Engineering},
    pages = {1818–1829},
    numpages = {12},
    keywords = {web-browser, rendering regression, differential testing},
    location = {Pittsburgh, Pennsylvania},
    series = {ICSE '22},
    pdf={r2z2.pdf},
    selected={true}
}

@INPROCEEDINGS{9519470,
    abbr={S&P},
  author={Hur, Jaewon and Song, Suhwan and Kwon, Dongup and Baek, Eunjin and Kim, Jangwoo and Lee, Byoungyoung},
  booktitle={2021 IEEE Symposium on Security and Privacy (SP)}, 
  title={DifuzzRTL: Differential Fuzz Testing to Find CPU Bugs}, 
  year={2021},
  volume={},
  number={},
  pages={1286-1303}
}


@inproceedings{10.1145/3368089.3409769,
    abbr={FSE},
    bibtex_show={true},
    author = {Song, Suhwan and Song, Chengyu and Jang, Yeongjin and Lee, Byoungyoung},
    title = {CrFuzz: Fuzzing Multi-Purpose Programs through Input Validation},
    year = {2020},
    isbn = {9781450370431},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/3368089.3409769},
    abstract = {Fuzz testing has been proved its effectiveness in discovering software vulnerabilities. Empowered its randomness nature along with a coverage-guiding feature, fuzzing has been identified a vast number of vulnerabilities in real-world programs. This paper begins with an observation that the design of the current state-of-the-art fuzzers is not well suited for a particular (but yet important) set of software programs. Specifically, current fuzzers have limitations in fuzzing programs serving multiple purposes, where each purpose is controlled by extra options. This paper proposes CrFuzz, which overcomes this limitation. CrFuzz designs a clustering analysis to automatically predict if a newly given input would be accepted or not by a target program. Exploiting this prediction capability, CrFuzz is designed to efficiently explore the programs with multiple purposes. We employed CrFuzz for three state-of-the-art fuzzers, AFL, QSYM, and MOpt, and CrFuzz-augmented versions have shown 19.3\% and 5.68\% better path and edge coverage on average. More importantly, during two weeks of long-running experiments, CrFuzz discovered 277 previously unknown vulnerabilities where 212 of those are already confirmed and fixed by the respected vendors. We would like to emphasize that many of these vulnerabilities were discoverd from FFMpeg, ImageMagick, and Graphicsmagick, all of which are targets of Google's OSS-Fuzz project and thus heavily fuzzed for last three years by far. Nevertheless, CrFuzz identified a remarkable number of vulnerabilities, demonstrating its effectiveness of vulnerability finding capability.},
    booktitle = {Proceedings of the 28th ACM Joint Meeting on European Software Engineering Conference and Symposium on the Foundations of Software Engineering},
    pages = {690–700},
    numpages = {11},
    keywords = {Fuzz testing, Coverage-guided fuzzing},
    location = {Virtual Event, USA},
    series = {ESEC/FSE 2020},
    pdf={crfuzz.pdf},
    selected={true}
}
